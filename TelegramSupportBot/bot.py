from telebot import types

import config
import core
import telebot
import random
import datetime
import markup
import sys
from telebot import apihelper



if config.PROXY_URL:
    apihelper.proxy = {'https': config.PROXY_URL}

bot = telebot.TeleBot(config.TOKEN, skip_pending=True)

@bot.message_handler(commands=['start'])
def start(message):
    if '/start agent' in message.text:
        # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞
        user_id = message.from_user.id
        if core.check_agent_status(user_id):
            bot.send_message(message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html',
                             reply_markup=markup.markup_agent())
        else:
            take_password_message = bot.send_message(message.chat.id,
                                                     '‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –í—ñ–¥–ø—Ä–∞–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É.',
                                                     reply_markup=markup.markup_cancel())
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_password_message, get_password_message)
    else:
        bot.send_message(
            message.chat.id,
            '',
            parse_mode='html',
            disable_notification=True,
        )
        # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        user_id = message.chat.id
        markup_main = markup.markup_main(user_id)
        bot.send_message(message.chat.id,
                         'üëãüèª –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–±–æ–Ω–µ–Ω—Ç—ñ–≤.\n–Ø–∫—â–æ —É –í–∞—Å —î —è–∫—ñ—Å—å –ø–∏—Ç–∞–Ω–Ω—è - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç</b> —ñ –º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ!',
                         parse_mode='html', reply_markup=markup_main)


@bot.message_handler(commands=['agent'])
def agent(message):
    user_id = message.from_user.id

    if core.check_agent_status(user_id) == True: 
        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        take_password_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –í—ñ–¥–ø—Ä–∞–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_password_message, get_password_message)


@bot.message_handler(commands=['admin'])
def admin(message):
    user_id = message.from_user.id

    if str(user_id) == config.ADMIN_ID:
        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω', reply_markup=markup.markup_admin())
    else:
        bot.send_message(message.chat.id, 'üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


@bot.message_handler(content_types=['text'])
def send_text(message):
    user_id = message.from_user.id

    if message.text == '‚úèÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç':
        take_new_request = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç —ñ –º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–º–æ.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_new_request, get_new_request)

    elif message.text == '‚úâÔ∏è –ú–æ—ó –∑–∞–ø–∏—Ç–∏':
        markup_and_value = markup.markup_reqs(user_id, 'my_reqs', '1')
        markup_req = markup_and_value[0]
        value = markup_and_value[1]

        if value == 0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤.', reply_markup=markup.markup_main(user_id))
        else:
            bot.send_message(message.chat.id, '–í–∞—à—ñ –∑–∞–ø–∏—Ç–∏:', reply_markup=markup_req, parse_mode='HTML')
    elif message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é':
        # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /agent
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ /agent
        agent_url = "https://t.me/Elancom_bot?start=agent"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        bot.send_message(
            message.chat.id,
            f"–í–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–≥–µ–Ω—Ç–∞. [/agent]({agent_url})",
            parse_mode='Markdown'
        )

    else:
        bot.send_message(message.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', parse_mode='html', reply_markup=markup.markup_main(user_id))


def get_password_message(message):
    password = message.text
    user_id = message.from_user.id

    if password == None:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)

    elif password.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=markup.markup_main(user_id))
        return

    elif core.valid_password(password) == True:
        core.delete_password(password)
        core.add_agent(user_id)

        bot.send_message(message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–º', parse_mode='html', reply_markup=markup.markup_main(user_id))
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ:', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)


def get_agent_id_message(message):
    user_id = message.from_user.id
    agent_id = message.text

    if agent_id == None:
        take_agent_id_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π–∏–µ —â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

    elif agent_id.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=markup.markup_main(user_id))
        return

    else:
        core.add_agent(agent_id)
        bot.send_message(message.chat.id, '‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.', reply_markup=markup.markup_main(user_id))
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ:', reply_markup=markup.markup_admin())


def get_new_request(message):
    request = message.text
    user_id = message.from_user.id
    check_file = core.get_file(message)

    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        request = check_file['text']

        if str(request) == 'None':
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â—ë —Ä–∞–∑, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–æ–º –∑ —Ñ–∞–π–ª–æ–º.', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        else:
            req_id = core.new_req(user_id, request)
            core.add_file(req_id, file_id, file_name, type)

            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –∑–∞ ID {req_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–ú–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏</b>', parse_mode='html', reply_markup=markup.markup_main(user_id))
    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    else:
        if request == None:
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–∏–ø, —â–æ –≤—ñ–¥–ø—Ä–≤–ª—è—î—Ç—å—Å—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ –±–æ—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        elif request.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
            bot.send_message(message.chat.id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=markup.markup_main(user_id))
            return

        else:
            req_id = core.new_req(user_id, request)
            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –∑–∞ ID {req_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–ú–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏</b>', parse_mode='html', reply_markup=markup.markup_main(user_id))
    send_notification_to_agents(req_id)
def send_notification_to_agents(req_id):
    # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    agents = core.get_agents(1)

    for agent_tuple in agents:
        agent_id = agent_tuple[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        bot.send_message(agent_id, f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑–∞ ID {req_id}.\n–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞.")

def get_additional_message(message, req_id, status):
    user_id = message.from_user.id
    additional_message = message.text
    check_file = core.get_file(message)

    agent_id = core.get_agent_id_for_request(req_id)

    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        file_type = check_file['type']
        additional_message = check_file['text']

        core.add_file(req_id, file_id, file_name, file_type)

    if additional_message == None:
        take_additional_message = bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –¢–∏–ø, —â–æ –≤—ñ–¥–ø—Ä–≤–ª—è—î—Ç—å—Å—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ –±–æ—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status)

    elif additional_message.lower() == '—Å–∫–∞—Å—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=markup.markup_main(user_id))
        return

    else:
        if additional_message != 'None':
            core.add_message(req_id, additional_message, status)

        if check_file != None:
            if additional_message != 'None':
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ!'
            else:
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π!'
        else:
            text = '‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!'
        
        bot.send_message(message.chat.id, text, reply_markup=markup.markup_main(user_id))

        if status == 'agent':
            try:
                user_id = core.get_user_id_of_req(req_id)

                if user_id != agent_id:
                    try:
                        if additional_message == 'None':
                            additional_message = ''

                        status_user = 'user'
                        markup_reply = types.InlineKeyboardMarkup()
                        reply_button = types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
                                                                  callback_data=f'add_message:{req_id}:{status_user}')
                        markup_reply.add(reply_button)
                        bot.send_message(user_id,
                                         f'‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç ID {req_id}!\n\nüßë‚Äçüíª Elancom:\n{additional_message}',
                                         reply_markup=markup_reply)

                        if file_type == 'photo':
                            bot.send_photo(user_id, photo=file_id, reply_markup=markup.markup_main(user_id))
                        elif file_type == 'document':
                            bot.send_document(user_id, document=file_id, reply_markup=markup.markup_main(user_id))
                        elif file_type == 'video':
                            bot.send_video(user_id, video=file_id, reply_markup=markup.markup_main(user_id))
                        elif file_type == 'audio':
                            bot.send_audio(user_id, audio=file_id, reply_markup=markup.markup_main(user_id))
                        elif file_type == 'voice':
                            bot.send_voice(user_id, voice=file_id, reply_markup=markup.markup_main(user_id))
                        else:
                            bot.send_message(user_id, additional_message, reply_markup=markup.markup_main(user_id))
                    except Exception as user_send_exception:
                        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:", user_send_exception)
            except Exception as get_user_id_exception:
                print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ user_id:", get_user_id_exception)

        try:
            if additional_message == 'None':
                additional_message = ''

            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç
            if status != 'agent':
                # print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É")

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å"
                callback = 'open_req'
                inline_markup = types.InlineKeyboardMarkup()
                open_request_button = types.InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç",
                                                                 callback_data=f'open_req:{req_id}:{callback}-{req_id}')
                inline_markup.add(open_request_button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å"
                bot.send_message(agent_id,
                                 f'–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç ID {req_id}.\n–ë—É–¥—å-–ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞.',
                                 reply_markup=inline_markup)
        except Exception as agent_send_exception:
            print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç—É:", agent_send_exception)



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.message.chat.id

    if call.message:
        if ('my_reqs:' in call.data) or ('waiting_reqs:' in call.data) or ('answered_reqs:' in call.data) or ('confirm_reqs:' in call.data):
            """
            –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è:

            ‚úâÔ∏è –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
            ‚ùóÔ∏è –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏,
            ‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã  
            """

            parts = call.data.split(':')
            callback = parts[0]
            number = parts[1]
            markup_and_value = markup.markup_reqs(user_id, callback, number)
            markup_req = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ó–∞–ø–∏—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main(user_id))
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–∞–ø–∏—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∞–±–æ –¥–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', reply_markup=markup_req)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–í–∞—à—ñ –∑–∞–ø–∏—Ç–∏:', reply_markup=markup_req, parse_mode='HTML')

            bot.answer_callback_query(call.id)

        #–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å
        elif 'open_req:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]

            req_status = core.get_req_status(req_id)
            request_data = core.get_request_data(req_id, callback)
            len_req_data = len(request_data)

            i = 1
            for data in request_data:
                if i == len_req_data:
                    markup_req = markup.markup_request_action(req_id, req_status, callback)
                else:
                    markup_req = None

                bot.send_message(chat_id=call.message.chat.id, text=data, parse_mode='html', reply_markup=markup_req)

                i += 1

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å
        elif 'add_message:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            status_user = parts[2]

            take_additional_message = bot.send_message(chat_id=call.message.chat.id,
                                                       text='–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª–∏, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∞—É–¥—ñ–æ, –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)',
                                                       reply_markup=markup.markup_cancel())

            if status_user == 'agent':
                req_status = core.get_req_status(req_id)
                if req_status == 'waiting':
                    agent_id = call.from_user.id
                    core.update_request_agent(req_id, agent_id)


            bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status_user)

            bot.answer_callback_query(call.id)

        #–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        elif 'confirm_req:' in call.data:
            parts = call.data.split(':')
            confirm_status = parts[1]
            req_id = parts[2]

            if core.get_req_status(req_id) == 'confirm':
                bot.send_message(chat_id=call.message.chat.id, text="‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=markup.markup_main(user_id))
                bot.answer_callback_query(call.id)

                return
            
            #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if confirm_status == 'wait':
                bot.send_message(chat_id=call.message.chat.id, text="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>", parse_mode='html', reply_markup=markup.markup_confirm_req(req_id))
            
            #–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            elif confirm_status == 'true':
                core.confirm_req(req_id)
                
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=markup.markup_main(user_id))
                except:
                    bot.send_message(chat_id=call.message.chat.id, text="‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=markup.markup_main(user_id))

                bot.answer_callback_query(call.id)

        #–§–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–∞
        elif 'req_files:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]
            number = parts[3]

            markup_and_value = markup.markup_files(number, req_id, callback)
            markup_files = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main(user_id))
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)
            except:
                bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)

            bot.answer_callback_query(call.id)

        #–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
        elif 'send_file:' in call.data:
            parts = call.data.split(':')
            id = parts[1]
            type = parts[2]

            file_id = core.get_file_id(id)


            if type == 'photo':
                bot.send_photo(call.message.chat.id, photo=file_id, reply_markup=markup.markup_main(user_id))
            elif type == 'document':
                bot.send_document(call.message.chat.id, document=file_id, reply_markup=markup.markup_main(user_id))
            elif type == 'video':
                bot.send_video(call.message.chat.id, video=file_id, reply_markup=markup.markup_main(user_id))
            elif type == 'audio':
                bot.send_audio(call.message.chat.id, audio=file_id, reply_markup=markup.markup_main(user_id))
            elif type == 'voice':
                bot.send_voice(call.message.chat.id, voice=file_id, reply_markup=markup.markup_main(user_id))
            
            bot.answer_callback_query(call.id)

        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'back_agent':

            markup_agent = markup.markup_agent()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html',
                                      reply_markup=markup_agent)
            except:
                bot.send_message(call.message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–≥–µ–Ω—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏', parse_mode='html',
                                 reply_markup=markup_agent)

            bot.answer_callback_query(call.id)
            return

        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
        elif call.data == 'back_admin':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω', parse_mode='html', reply_markup=markup.markup_admin())
            except:
                bot.send_message(call.message.chat.id, 'üîë –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –ê–¥–º—ñ–Ω', parse_mode='html', reply_markup=markup.markup_admin())

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'add_agent':
            take_agent_id_message = bot.send_message(chat_id=call.message.chat.id, text='–î–ª—è —Ç–æ–≥–æ, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ - –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ ID Telegram.', reply_markup=markup.markup_cancel())
            bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

        #–í—Å–µ –∞–≥–µ–Ω—Ç—ã
        elif 'all_agents:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_agents(number)
            markup_agents = markup_and_value[0]
            len_agents = markup_and_value[1]

            if len_agents == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main(user_id))
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, –¥–ª—è —Ç–æ–≥–æ —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup_agents)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup_agents)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif 'delete_agent:' in call.data:
            agent_id = call.data.split(':')[1]
            core.delete_agent(agent_id)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup.markup_agents('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup.markup_agents('1')[0])

            bot.answer_callback_query(call.id)

        #–í—Å–µ –ø–∞—Ä–æ–ª–∏
        elif 'all_passwords:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_passwords(number)
            markup_passwords = markup_and_value[0]
            len_passwords = markup_and_value[1]

            if len_passwords == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=markup.markup_main(user_id))
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup_passwords)
            except:
                bot.send_message(call.message.chat.id, '–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup_passwords)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å
        elif 'delete_password:' in call.data:
            password = call.data.split(':')[1]
            core.delete_password(password)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])
            except:
                bot.send_message(call.message.chat.id, '–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏
        elif call.data == 'generate_passwords':
            #10 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π, 16 - –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
            passwords = core.generate_passwords(10, 16) 
            core.add_passwords(passwords)

            text_passwords = ''
            i = 1
            for password in passwords:
                text_passwords += f'{i}. {password}\n'
                i += 1
            
            bot.send_message(call.message.chat.id, f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {i-1} –ø–∞—Ä–æ–ª–µ–π:\n\n{text_passwords}", parse_mode='html', reply_markup=markup.markup_main(user_id))
            bot.send_message(call.message.chat.id, '–ù–∞—Ç—Å–∏–Ω—ñ—Ç—å –Ω–∞ –ø–∞—Ä–æ–ª—å, —â–æ–± –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        elif 'stop_bot:' in call.data:
            status = call.data.split(':')[1]

            #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            if status == 'wait':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())
                except:
                    bot.send_message(call.message.chat.id, f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())

            #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
            elif status == 'confirm':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚úÖ –ë–æ—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π.')
                except:
                    bot.send_message(chat_id=call.message.chat.id, text='‚úÖ –ë–æ—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π.')

                bot.answer_callback_query(call.id)
                bot.stop_polling()
                sys.exit()



if __name__ == "__main__":
    bot.polling(none_stop=True)